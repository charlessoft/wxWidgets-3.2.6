name: CI
on:
  repository_dispatch:
    types:
      - webhook-1
      - webhook-2
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]  
jobs:
  msw-msvs:
    runs-on: windows-${{ matrix.vsversion }}
    name: wxMSW vs${{ matrix.vsversion }} ${{ matrix.configuration }} ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - configuration: 'Debug'
            platform: 'Win32'
            vsversion: 2019
          - configuration: 'Release'
            platform: 'Win32'
            vsversion: 2019
          - configuration: 'Debug'
            platform: 'x64'
            vsversion: 2019
          - configuration: 'Release'
            platform: 'x64'
            vsversion: 2019
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Configure build options
        working-directory: include/wx/msw
        run: |
            $use_utf8 = "${{ matrix.use_utf8 }}" ? 1 : 0
            if ( $use_utf8 ) {
              $txt = Get-Content setup.h
              Write-Output $txt |
              %{$_ -replace "define wxUSE_UNICODE_UTF8 0", "define wxUSE_UNICODE_UTF8 $use_utf8"} |
              Set-Content setup.h
            }

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v2
        with:
            vs-prerelease: true

      - name: Build
        run: |
            msbuild /noLogo /m '/p:Configuration=${{ matrix.configuration }}' /p:Platform=${{ matrix.platform }} build\msw\wx_vc16.sln
            if ( '${{ matrix.configuration }}'.IndexOf('DLL') -ne -1 ) {
                $dlldir = Join-Path (Get-Location) 'lib\vc_${{ matrix.platform }}_dll'
                Write-Output "Adding $dlldir to the PATH"
                $dlldir | Out-File -Append $env:GITHUB_PATH
            }

      - name: Package files
        run: |
          mkdir -p package
          mv ./include ./package/
          mv ./lib/vc_${{ matrix.platform }}_lib ./package/
        env:
          LIB_DIR: ${{ matrix.platform == 'Win32' ? 'vc_lib' : 'vc_x64_lib' }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: vc_lib_${{ matrix.configuration | lower }}_${{ matrix.platform | lower }}
          path: package

  create-release:
    runs-on: ubuntu-latest
    needs: msw-msvs
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up environment
        run: echo "RELEASE_DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV
        
      - name: Install GitHub CLI
        uses: sersoft-gmbh/setup-gh-cli-action@v2
        
      - name: Delete existing release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release delete $RELEASE_DATE --yes || true

      - name: Create new release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create $RELEASE_DATE -t "Release $RELEASE_DATE" -n "Automated release for $RELEASE_DATE"
       
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Upload Artifacts to Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for artifact in ./artifacts/*.zip; do
            gh release upload $RELEASE_DATE "$artifact"
          done
